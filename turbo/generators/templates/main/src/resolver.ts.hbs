import type {
  InputFrom,
  OutputFrom,
  Resolver,
  SchemaFrom,
} from '@typeschema/core';
{{#each adapters}}
import type {AdapterResolver as {{pascalCase name}}Resolver} from '@typeschema/{{name}}';
{{/each}}

export type AdapterResolverMap = {
{{#each adapters}}
  {{camelCase name}}: {{pascalCase name}}Resolver;
{{/each}}
};

export interface AdapterResolver extends Resolver {
  base: {
    [Adapter in keyof AdapterResolverMap]: SchemaFrom<
      AdapterResolverMap[Adapter]
    >;
  }[keyof AdapterResolverMap];
  input: {
    [Adapter in keyof AdapterResolverMap]: this['schema'] extends SchemaFrom<
      AdapterResolverMap[Adapter]
    >
      ? InputFrom<AdapterResolverMap[Adapter], this['schema']>
      : never;
  }[keyof AdapterResolverMap];
  output: {
    [Adapter in keyof AdapterResolverMap]: this['schema'] extends SchemaFrom<
      AdapterResolverMap[Adapter]
    >
      ? OutputFrom<AdapterResolverMap[Adapter], this['schema']>
      : never;
  }[keyof AdapterResolverMap];
}

import type {Input, Output, Resolver, Schema} from '@typeschema/core';
{{#each adapterNames}}
import type {AdapterResolver as {{pascalCase this}}Resolver} from '@typeschema/{{this}}';
{{/each}}

export type AdapterResolverMap = {
{{#each adapterNames}}
  {{camelCase this}}: {{pascalCase this}}Resolver;
{{/each}}
};

export interface AdapterResolver extends Resolver {
  base: {
    [Adapter in keyof AdapterResolverMap]: Schema<AdapterResolverMap[Adapter]>;
  }[keyof AdapterResolverMap];
  input: {
    [Adapter in keyof AdapterResolverMap]: this['schema'] extends Schema<
      AdapterResolverMap[Adapter]
    >
      ? Input<AdapterResolverMap[Adapter], this['schema']>
      : never;
  }[keyof AdapterResolverMap];
  output: {
    [Adapter in keyof AdapterResolverMap]: this['schema'] extends Schema<
      AdapterResolverMap[Adapter]
    >
      ? Output<AdapterResolverMap[Adapter], this['schema']>
      : never;
  }[keyof AdapterResolverMap];
}

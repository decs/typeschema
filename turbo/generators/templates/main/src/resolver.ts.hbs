import type {
  IfDefined,
  Input,
  Output,
  Resolver,
  Schema,
  UnknownIfNever,
} from '@typeschema/core';
{{#each adapterNames}}
import type {AdapterResolver as {{pascalCase this}}Resolver} from '@typeschema/{{this}}';
{{/each}}

export type AdapterResolverMap = {
{{#each adapterNames}}
  {{camelCase this}}: {{pascalCase this}}Resolver;
{{/each}}
};

export interface AdapterResolver extends Resolver {
  base: {
    [Adapter in keyof AdapterResolverMap]: IfDefined<
      Schema<AdapterResolverMap[Adapter]>
    >;
  }[keyof AdapterResolverMap];
  input: UnknownIfNever<
    {
      [Adapter in keyof AdapterResolverMap]: IfDefined<
        this['schema'] extends IfDefined<AdapterResolverMap[Adapter]['base']>
          ? Input<AdapterResolverMap[Adapter], this['schema']>
          : never
      >;
    }[keyof AdapterResolverMap]
  >;
  output: UnknownIfNever<
    {
      [Adapter in keyof AdapterResolverMap]: IfDefined<
        this['schema'] extends IfDefined<AdapterResolverMap[Adapter]['base']>
          ? Output<AdapterResolverMap[Adapter], this['schema']>
          : never
      >;
    }[keyof AdapterResolverMap]
  >;
}

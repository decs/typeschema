import type {Input, Output, Resolver, Schema} from '@typeschema/core';
{{#each adapterNames}}
import type {AdapterResolver as {{pascalCase this}}Resolver} from '@typeschema/{{this}}';
{{/each}}

export type AdapterResolverMap = {
{{#each adapterNames}}
  {{camelCase this}}: {{pascalCase this}}Resolver;
{{/each}}
};

type AdapterResolvers = AdapterResolverMap[keyof AdapterResolverMap];

export interface AdapterResolver extends Resolver {
  base: Schema<AdapterResolvers>;
  input: this['schema'] extends this['base']
    ? Input<AdapterResolvers, this['schema']>
    : never;
  output: this['schema'] extends this['base']
    ? Output<AdapterResolvers, this['schema']>
    : never;
}

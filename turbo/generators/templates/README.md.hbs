<br />
<p align="center">
  <img src="https://typeschema.com/assets/logo.png" width="64px" alt="TypeSchema" />
</p>
<h1 align="center">
  TypeSchema
</h1>
<p align="center">
  Universal adapter for schema validation
  <br />
  ✨ <a href="https://typeschema.com">https://typeschema.com</a> ✨
</p>
<br />

<p align="center">
  <a href="https://opensource.org/licenses/MIT" rel="nofollow"><img src="https://img.shields.io/github/license/decs/typeschema" alt="License"></a>
  <a href="https://bundlephobia.com/package/@typeschema/{{adapter.name}}" rel="nofollow"><img src="https://img.shields.io/bundlephobia/minzip/%40typeschema%2F{{adapter.name}}" alt="Bundle size"></a>
  <a href="https://www.npmjs.com/package/@typeschema/core" rel="nofollow"><img src="https://img.shields.io/npm/dw/@typeschema/core.svg" alt="npm downloads"></a>
  <a href="https://github.com/decs/typeschema/stargazers" rel="nofollow"><img src="https://img.shields.io/github/stars/decs/typeschema" alt="GitHub stars"></a>
</p>
<p align="center">
  <a href="#quickstart">Quickstart</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href="#coverage">Coverage</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href="#api">API</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href="https://github.com/decs/typeschema">GitHub</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href="https://www.npmjs.com/package/@typeschema/{{adapter.name}}">npm</a>
</p>
<br />

> When fetching data from an external source, it's important to verify its integrity. This happens when processing user inputs, calling third-party APIs, loading configuration files, and so on. And the thing is: Typescript doesn't come with runtime validation. Any type assertions are [removed at compile-time](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions).
> 
> As a result, developers turn to third-party validation libraries. But that landscape is fragmented, lacking a single best option. Each offers different trade-offs on developer experience, bundle size, and community support.
> 
> TypeSchema enables writing code that [works with any validation library](#coverage) out-of-the-box. It provides a universal adapter for interacting with any validation schema, decoupling from implementation specifics and increasing compatibility.

```ts
import {validate} from '@typeschema/{{adapter.name}}';

import {z} from 'zod';
import {string} from 'valibot';

const zodSchema = z.string();
await validate(zodSchema, '123');
//    ^? {success: true, data: '123'}

const valibotSchema = string();
await validate(valibotSchema, 123);
//    ^? {success: false, issues: [...]}
```

## Quickstart

We value flexibility, which is why there are multiple ways of using TypeSchema:
1. **Using an adapter directly** (e.g. [`@typeschema/valibot`](https://github.com/decs/typeschema/tree/main/packages/valibot)): Best pick for end developers, when the validation library is known ahead of time. This is particularly useful for supporting more validation libraries on [tRPC](https://trpc.io/).
2. **Handpicking adapters** with [`@typeschema/main`](https://github.com/decs/typeschema/tree/main/packages/main): Recommended for library maintainers. Any validation library can be used, but adapters have to be explicitly installed. This allows end developers to trade-off between coverage and bundle size.
3. **Batteries included** with [`@typeschema/all`](https://github.com/decs/typeschema/tree/main/packages/all): Easiest to use. All adapters are automatically installed, including future ones. This is a drop-in replacement for the deprecated [`@decs/typeschema`](https://www.npmjs.com/package/@decs/typeschema).

## Coverage

| Project             | Popularity                                                                                                                                            | `Infer`                          | `InferIn`                       | Validation                            | Serialization                            | Adapter                                                                                                  |
| :------------------ | :---------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------: | :-----------------------------: | :-----------------------------------: | :--------------------------------------: | :------------------------------------------------------------------------------------------------------- |
{{#each libraries}}
| [{{name}}]({{url}}) | <a href="https://github.com/{{github}}" rel="nofollow"><img src="https://img.shields.io/github/stars/{{github}}?style=social" alt="GitHub stars"></a> | {{icon adapter.canInfer.output}} | {{icon adapter.canInfer.input}} | {{icon adapter.hasModule.validation}} | {{icon adapter.hasModule.serialization}} | [`@typeschema/{{adapter.name}}`](https://github.com/decs/typeschema/tree/main/packages/{{adapter.name}}) |
{{/each}}

{{> readmeAPI adapter}}

## Acknowledgements

- Inspired by [tRPC](https://trpc.io/)'s [input & output validators](https://trpc.io/docs/server/validators)
- Adapter architecture inspired by [@ecyrbe](https://github.com/ecyrbe)'s [suggestions](https://github.com/decs/typeschema/issues/1)
- API definition inspired by [@colinhacks](https://github.com/colinhacks)'s [proposal](https://twitter.com/colinhacks/status/1634284724796661761)
- Logo designed by [flaticon](https://www.flaticon.com/)
